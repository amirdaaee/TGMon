// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockiMongo is an autogenerated mock type for the iMongo type
type MockiMongo struct {
	mock.Mock
}

type MockiMongo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockiMongo) EXPECT() *MockiMongo_Expecter {
	return &MockiMongo_Expecter{mock: &_m.Mock}
}

// GetCollection provides a mock function with given fields: cl
func (_m *MockiMongo) GetCollection(cl *mongo.Client) *mongo.Collection {
	ret := _m.Called(cl)

	if len(ret) == 0 {
		panic("no return value specified for GetCollection")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(*mongo.Client) *mongo.Collection); ok {
		r0 = rf(cl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// MockiMongo_GetCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollection'
type MockiMongo_GetCollection_Call struct {
	*mock.Call
}

// GetCollection is a helper method to define mock.On call
//   - cl *mongo.Client
func (_e *MockiMongo_Expecter) GetCollection(cl interface{}) *MockiMongo_GetCollection_Call {
	return &MockiMongo_GetCollection_Call{Call: _e.mock.On("GetCollection", cl)}
}

func (_c *MockiMongo_GetCollection_Call) Run(run func(cl *mongo.Client)) *MockiMongo_GetCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mongo.Client))
	})
	return _c
}

func (_c *MockiMongo_GetCollection_Call) Return(_a0 *mongo.Collection) *MockiMongo_GetCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockiMongo_GetCollection_Call) RunAndReturn(run func(*mongo.Client) *mongo.Collection) *MockiMongo_GetCollection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockiMongo creates a new instance of MockiMongo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockiMongo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockiMongo {
	mock := &MockiMongo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
