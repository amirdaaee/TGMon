// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	context "context"

	db "github.com/amirdaaee/TGMon/internal/db"
	errs "github.com/amirdaaee/TGMon/internal/errs"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockIDataStore is an autogenerated mock type for the IDataStore type
type MockIDataStore[T db.IMongoDoc] struct {
	mock.Mock
}

type MockIDataStore_Expecter[T db.IMongoDoc] struct {
	mock *mock.Mock
}

func (_m *MockIDataStore[T]) EXPECT() *MockIDataStore_Expecter[T] {
	return &MockIDataStore_Expecter[T]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, doc, cl
func (_m *MockIDataStore[T]) Create(ctx context.Context, doc T, cl *mongo.Client) (T, errs.IMongoErr) {
	ret := _m.Called(ctx, doc, cl)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 T
	var r1 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(context.Context, T, *mongo.Client) (T, errs.IMongoErr)); ok {
		return rf(ctx, doc, cl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, *mongo.Client) T); ok {
		r0 = rf(ctx, doc, cl)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, *mongo.Client) errs.IMongoErr); ok {
		r1 = rf(ctx, doc, cl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.IMongoErr)
		}
	}

	return r0, r1
}

// MockIDataStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIDataStore_Create_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - doc T
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) Create(ctx interface{}, doc interface{}, cl interface{}) *MockIDataStore_Create_Call[T] {
	return &MockIDataStore_Create_Call[T]{Call: _e.mock.On("Create", ctx, doc, cl)}
}

func (_c *MockIDataStore_Create_Call[T]) Run(run func(ctx context.Context, doc T, cl *mongo.Client)) *MockIDataStore_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T), args[2].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_Create_Call[T]) Return(_a0 T, _a1 errs.IMongoErr) *MockIDataStore_Create_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDataStore_Create_Call[T]) RunAndReturn(run func(context.Context, T, *mongo.Client) (T, errs.IMongoErr)) *MockIDataStore_Create_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, filter, cl
func (_m *MockIDataStore[T]) Delete(ctx context.Context, filter *primitive.D, cl *mongo.Client) errs.IMongoErr {
	ret := _m.Called(ctx, filter, cl)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, *mongo.Client) errs.IMongoErr); ok {
		r0 = rf(ctx, filter, cl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.IMongoErr)
		}
	}

	return r0
}

// MockIDataStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIDataStore_Delete_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *primitive.D
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) Delete(ctx interface{}, filter interface{}, cl interface{}) *MockIDataStore_Delete_Call[T] {
	return &MockIDataStore_Delete_Call[T]{Call: _e.mock.On("Delete", ctx, filter, cl)}
}

func (_c *MockIDataStore_Delete_Call[T]) Run(run func(ctx context.Context, filter *primitive.D, cl *mongo.Client)) *MockIDataStore_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*primitive.D), args[2].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_Delete_Call[T]) Return(_a0 errs.IMongoErr) *MockIDataStore_Delete_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDataStore_Delete_Call[T]) RunAndReturn(run func(context.Context, *primitive.D, *mongo.Client) errs.IMongoErr) *MockIDataStore_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function with given fields: ctx, filter, cl
func (_m *MockIDataStore[T]) DeleteMany(ctx context.Context, filter *primitive.D, cl *mongo.Client) errs.IMongoErr {
	ret := _m.Called(ctx, filter, cl)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, *mongo.Client) errs.IMongoErr); ok {
		r0 = rf(ctx, filter, cl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.IMongoErr)
		}
	}

	return r0
}

// MockIDataStore_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockIDataStore_DeleteMany_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *primitive.D
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) DeleteMany(ctx interface{}, filter interface{}, cl interface{}) *MockIDataStore_DeleteMany_Call[T] {
	return &MockIDataStore_DeleteMany_Call[T]{Call: _e.mock.On("DeleteMany", ctx, filter, cl)}
}

func (_c *MockIDataStore_DeleteMany_Call[T]) Run(run func(ctx context.Context, filter *primitive.D, cl *mongo.Client)) *MockIDataStore_DeleteMany_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*primitive.D), args[2].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_DeleteMany_Call[T]) Return(_a0 errs.IMongoErr) *MockIDataStore_DeleteMany_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDataStore_DeleteMany_Call[T]) RunAndReturn(run func(context.Context, *primitive.D, *mongo.Client) errs.IMongoErr) *MockIDataStore_DeleteMany_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, cl
func (_m *MockIDataStore[T]) Find(ctx context.Context, filter *primitive.D, cl *mongo.Client) (T, errs.IMongoErr) {
	ret := _m.Called(ctx, filter, cl)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 T
	var r1 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, *mongo.Client) (T, errs.IMongoErr)); ok {
		return rf(ctx, filter, cl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, *mongo.Client) T); ok {
		r0 = rf(ctx, filter, cl)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *primitive.D, *mongo.Client) errs.IMongoErr); ok {
		r1 = rf(ctx, filter, cl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.IMongoErr)
		}
	}

	return r0, r1
}

// MockIDataStore_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockIDataStore_Find_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *primitive.D
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) Find(ctx interface{}, filter interface{}, cl interface{}) *MockIDataStore_Find_Call[T] {
	return &MockIDataStore_Find_Call[T]{Call: _e.mock.On("Find", ctx, filter, cl)}
}

func (_c *MockIDataStore_Find_Call[T]) Run(run func(ctx context.Context, filter *primitive.D, cl *mongo.Client)) *MockIDataStore_Find_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*primitive.D), args[2].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_Find_Call[T]) Return(_a0 T, _a1 errs.IMongoErr) *MockIDataStore_Find_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDataStore_Find_Call[T]) RunAndReturn(run func(context.Context, *primitive.D, *mongo.Client) (T, errs.IMongoErr)) *MockIDataStore_Find_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetCollection provides a mock function with given fields: cl
func (_m *MockIDataStore[T]) GetCollection(cl *mongo.Client) *mongo.Collection {
	ret := _m.Called(cl)

	if len(ret) == 0 {
		panic("no return value specified for GetCollection")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(*mongo.Client) *mongo.Collection); ok {
		r0 = rf(cl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// MockIDataStore_GetCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollection'
type MockIDataStore_GetCollection_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// GetCollection is a helper method to define mock.On call
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) GetCollection(cl interface{}) *MockIDataStore_GetCollection_Call[T] {
	return &MockIDataStore_GetCollection_Call[T]{Call: _e.mock.On("GetCollection", cl)}
}

func (_c *MockIDataStore_GetCollection_Call[T]) Run(run func(cl *mongo.Client)) *MockIDataStore_GetCollection_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_GetCollection_Call[T]) Return(_a0 *mongo.Collection) *MockIDataStore_GetCollection_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDataStore_GetCollection_Call[T]) RunAndReturn(run func(*mongo.Client) *mongo.Collection) *MockIDataStore_GetCollection_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetIDFilter provides a mock function with given fields: id
func (_m *MockIDataStore[T]) GetIDFilter(id primitive.ObjectID) *primitive.D {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetIDFilter")
	}

	var r0 *primitive.D
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *primitive.D); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.D)
		}
	}

	return r0
}

// MockIDataStore_GetIDFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDFilter'
type MockIDataStore_GetIDFilter_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// GetIDFilter is a helper method to define mock.On call
//   - id primitive.ObjectID
func (_e *MockIDataStore_Expecter[T]) GetIDFilter(id interface{}) *MockIDataStore_GetIDFilter_Call[T] {
	return &MockIDataStore_GetIDFilter_Call[T]{Call: _e.mock.On("GetIDFilter", id)}
}

func (_c *MockIDataStore_GetIDFilter_Call[T]) Run(run func(id primitive.ObjectID)) *MockIDataStore_GetIDFilter_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(primitive.ObjectID))
	})
	return _c
}

func (_c *MockIDataStore_GetIDFilter_Call[T]) Return(_a0 *primitive.D) *MockIDataStore_GetIDFilter_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDataStore_GetIDFilter_Call[T]) RunAndReturn(run func(primitive.ObjectID) *primitive.D) *MockIDataStore_GetIDFilter_Call[T] {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter, cl
func (_m *MockIDataStore[T]) List(ctx context.Context, filter *primitive.D, cl *mongo.Client) ([]T, errs.IMongoErr) {
	ret := _m.Called(ctx, filter, cl)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []T
	var r1 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, *mongo.Client) ([]T, errs.IMongoErr)); ok {
		return rf(ctx, filter, cl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, *mongo.Client) []T); ok {
		r0 = rf(ctx, filter, cl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *primitive.D, *mongo.Client) errs.IMongoErr); ok {
		r1 = rf(ctx, filter, cl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.IMongoErr)
		}
	}

	return r0, r1
}

// MockIDataStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockIDataStore_List_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *primitive.D
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) List(ctx interface{}, filter interface{}, cl interface{}) *MockIDataStore_List_Call[T] {
	return &MockIDataStore_List_Call[T]{Call: _e.mock.On("List", ctx, filter, cl)}
}

func (_c *MockIDataStore_List_Call[T]) Run(run func(ctx context.Context, filter *primitive.D, cl *mongo.Client)) *MockIDataStore_List_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*primitive.D), args[2].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_List_Call[T]) Return(_a0 []T, _a1 errs.IMongoErr) *MockIDataStore_List_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDataStore_List_Call[T]) RunAndReturn(run func(context.Context, *primitive.D, *mongo.Client) ([]T, errs.IMongoErr)) *MockIDataStore_List_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalOmitEmpty provides a mock function with given fields: doc
func (_m *MockIDataStore[T]) MarshalOmitEmpty(doc T) (*primitive.D, errs.IMongoErr) {
	ret := _m.Called(doc)

	if len(ret) == 0 {
		panic("no return value specified for MarshalOmitEmpty")
	}

	var r0 *primitive.D
	var r1 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(T) (*primitive.D, errs.IMongoErr)); ok {
		return rf(doc)
	}
	if rf, ok := ret.Get(0).(func(T) *primitive.D); ok {
		r0 = rf(doc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.D)
		}
	}

	if rf, ok := ret.Get(1).(func(T) errs.IMongoErr); ok {
		r1 = rf(doc)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.IMongoErr)
		}
	}

	return r0, r1
}

// MockIDataStore_MarshalOmitEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalOmitEmpty'
type MockIDataStore_MarshalOmitEmpty_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// MarshalOmitEmpty is a helper method to define mock.On call
//   - doc T
func (_e *MockIDataStore_Expecter[T]) MarshalOmitEmpty(doc interface{}) *MockIDataStore_MarshalOmitEmpty_Call[T] {
	return &MockIDataStore_MarshalOmitEmpty_Call[T]{Call: _e.mock.On("MarshalOmitEmpty", doc)}
}

func (_c *MockIDataStore_MarshalOmitEmpty_Call[T]) Run(run func(doc T)) *MockIDataStore_MarshalOmitEmpty_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockIDataStore_MarshalOmitEmpty_Call[T]) Return(_a0 *primitive.D, _a1 errs.IMongoErr) *MockIDataStore_MarshalOmitEmpty_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDataStore_MarshalOmitEmpty_Call[T]) RunAndReturn(run func(T) (*primitive.D, errs.IMongoErr)) *MockIDataStore_MarshalOmitEmpty_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function with given fields: ctx, filter, doc, cl
func (_m *MockIDataStore[T]) Replace(ctx context.Context, filter *primitive.D, doc T, cl *mongo.Client) (T, errs.IMongoErr) {
	ret := _m.Called(ctx, filter, doc, cl)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 T
	var r1 errs.IMongoErr
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, T, *mongo.Client) (T, errs.IMongoErr)); ok {
		return rf(ctx, filter, doc, cl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *primitive.D, T, *mongo.Client) T); ok {
		r0 = rf(ctx, filter, doc, cl)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *primitive.D, T, *mongo.Client) errs.IMongoErr); ok {
		r1 = rf(ctx, filter, doc, cl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.IMongoErr)
		}
	}

	return r0, r1
}

// MockIDataStore_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type MockIDataStore_Replace_Call[T db.IMongoDoc] struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *primitive.D
//   - doc T
//   - cl *mongo.Client
func (_e *MockIDataStore_Expecter[T]) Replace(ctx interface{}, filter interface{}, doc interface{}, cl interface{}) *MockIDataStore_Replace_Call[T] {
	return &MockIDataStore_Replace_Call[T]{Call: _e.mock.On("Replace", ctx, filter, doc, cl)}
}

func (_c *MockIDataStore_Replace_Call[T]) Run(run func(ctx context.Context, filter *primitive.D, doc T, cl *mongo.Client)) *MockIDataStore_Replace_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*primitive.D), args[2].(T), args[3].(*mongo.Client))
	})
	return _c
}

func (_c *MockIDataStore_Replace_Call[T]) Return(_a0 T, _a1 errs.IMongoErr) *MockIDataStore_Replace_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDataStore_Replace_Call[T]) RunAndReturn(run func(context.Context, *primitive.D, T, *mongo.Client) (T, errs.IMongoErr)) *MockIDataStore_Replace_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockIDataStore creates a new instance of MockIDataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDataStore[T db.IMongoDoc](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDataStore[T] {
	mock := &MockIDataStore[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
