// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=../../mocks/stream/cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileCache is a mock of IFileCache interface.
type MockIFileCache[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIFileCacheMockRecorder[T]
	isgomock struct{}
}

// MockIFileCacheMockRecorder is the mock recorder for MockIFileCache.
type MockIFileCacheMockRecorder[T any] struct {
	mock *MockIFileCache[T]
}

// NewMockIFileCache creates a new mock instance.
func NewMockIFileCache[T any](ctrl *gomock.Controller) *MockIFileCache[T] {
	mock := &MockIFileCache[T]{ctrl: ctrl}
	mock.recorder = &MockIFileCacheMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileCache[T]) EXPECT() *MockIFileCacheMockRecorder[T] {
	return m.recorder
}

// Get mocks base method.
func (m *MockIFileCache[T]) Get(arg0 string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIFileCacheMockRecorder[T]) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIFileCache[T])(nil).Get), arg0)
}

// GetOrSet mocks base method.
func (m *MockIFileCache[T]) GetOrSet(arg0 string, arg1 func() (T, error)) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrSet", arg0, arg1)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrSet indicates an expected call of GetOrSet.
func (mr *MockIFileCacheMockRecorder[T]) GetOrSet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrSet", reflect.TypeOf((*MockIFileCache[T])(nil).GetOrSet), arg0, arg1)
}

// Set mocks base method.
func (m *MockIFileCache[T]) Set(arg0 string, arg1 T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIFileCacheMockRecorder[T]) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIFileCache[T])(nil).Set), arg0, arg1)
}
