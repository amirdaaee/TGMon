// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go
//
// Generated by this command:
//
//	mockgen -source=pool.go -destination=../../mocks/stream/pool.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	stream "github.com/amirdaaee/TGMon/internal/stream"
	gomock "go.uber.org/mock/gomock"
)

// MockIWorkerPool is a mock of IWorkerPool interface.
type MockIWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerPoolMockRecorder
	isgomock struct{}
}

// MockIWorkerPoolMockRecorder is the mock recorder for MockIWorkerPool.
type MockIWorkerPoolMockRecorder struct {
	mock *MockIWorkerPool
}

// NewMockIWorkerPool creates a new mock instance.
func NewMockIWorkerPool(ctrl *gomock.Controller) *MockIWorkerPool {
	mock := &MockIWorkerPool{ctrl: ctrl}
	mock.recorder = &MockIWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerPool) EXPECT() *MockIWorkerPoolMockRecorder {
	return m.recorder
}

// GetNextWorker mocks base method.
func (m *MockIWorkerPool) GetNextWorker() stream.IWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextWorker")
	ret0, _ := ret[0].(stream.IWorker)
	return ret0
}

// GetNextWorker indicates an expected call of GetNextWorker.
func (mr *MockIWorkerPoolMockRecorder) GetNextWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextWorker", reflect.TypeOf((*MockIWorkerPool)(nil).GetNextWorker))
}
