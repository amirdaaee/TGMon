// Code generated by mockery v2.44.1. DO NOT EDIT.

package bot

import (
	context "context"

	dispatcher "github.com/celestix/gotgproto/dispatcher"
	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	tg "github.com/gotd/td/tg"
)

// MockIClient is an autogenerated mock type for the IClient type
type MockIClient struct {
	mock.Mock
}

type MockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIClient) EXPECT() *MockIClient_Expecter {
	return &MockIClient_Expecter{mock: &_m.Mock}
}

// ChannelsGetChannels provides a mock function with given fields: ctx, id
func (_m *MockIClient) ChannelsGetChannels(ctx context.Context, id []tg.InputChannelClass) (tg.MessagesChatsClass, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ChannelsGetChannels")
	}

	var r0 tg.MessagesChatsClass
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []tg.InputChannelClass) (tg.MessagesChatsClass, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []tg.InputChannelClass) tg.MessagesChatsClass); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.MessagesChatsClass)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []tg.InputChannelClass) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIClient_ChannelsGetChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelsGetChannels'
type MockIClient_ChannelsGetChannels_Call struct {
	*mock.Call
}

// ChannelsGetChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - id []tg.InputChannelClass
func (_e *MockIClient_Expecter) ChannelsGetChannels(ctx interface{}, id interface{}) *MockIClient_ChannelsGetChannels_Call {
	return &MockIClient_ChannelsGetChannels_Call{Call: _e.mock.On("ChannelsGetChannels", ctx, id)}
}

func (_c *MockIClient_ChannelsGetChannels_Call) Run(run func(ctx context.Context, id []tg.InputChannelClass)) *MockIClient_ChannelsGetChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]tg.InputChannelClass))
	})
	return _c
}

func (_c *MockIClient_ChannelsGetChannels_Call) Return(_a0 tg.MessagesChatsClass, _a1 error) *MockIClient_ChannelsGetChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIClient_ChannelsGetChannels_Call) RunAndReturn(run func(context.Context, []tg.InputChannelClass) (tg.MessagesChatsClass, error)) *MockIClient_ChannelsGetChannels_Call {
	_c.Call.Return(run)
	return _c
}

// ChannelsGetMessages provides a mock function with given fields: ctx, request
func (_m *MockIClient) ChannelsGetMessages(ctx context.Context, request *tg.ChannelsGetMessagesRequest) (tg.MessagesMessagesClass, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ChannelsGetMessages")
	}

	var r0 tg.MessagesMessagesClass
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tg.ChannelsGetMessagesRequest) (tg.MessagesMessagesClass, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tg.ChannelsGetMessagesRequest) tg.MessagesMessagesClass); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.MessagesMessagesClass)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tg.ChannelsGetMessagesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIClient_ChannelsGetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChannelsGetMessages'
type MockIClient_ChannelsGetMessages_Call struct {
	*mock.Call
}

// ChannelsGetMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - request *tg.ChannelsGetMessagesRequest
func (_e *MockIClient_Expecter) ChannelsGetMessages(ctx interface{}, request interface{}) *MockIClient_ChannelsGetMessages_Call {
	return &MockIClient_ChannelsGetMessages_Call{Call: _e.mock.On("ChannelsGetMessages", ctx, request)}
}

func (_c *MockIClient_ChannelsGetMessages_Call) Run(run func(ctx context.Context, request *tg.ChannelsGetMessagesRequest)) *MockIClient_ChannelsGetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*tg.ChannelsGetMessagesRequest))
	})
	return _c
}

func (_c *MockIClient_ChannelsGetMessages_Call) Return(_a0 tg.MessagesMessagesClass, _a1 error) *MockIClient_ChannelsGetMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIClient_ChannelsGetMessages_Call) RunAndReturn(run func(context.Context, *tg.ChannelsGetMessagesRequest) (tg.MessagesMessagesClass, error)) *MockIClient_ChannelsGetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields:
func (_m *MockIClient) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockIClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Connect() *MockIClient_Connect_Call {
	return &MockIClient_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockIClient_Connect_Call) Run(run func()) *MockIClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Connect_Call) Return(_a0 error) *MockIClient_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_Connect_Call) RunAndReturn(run func() error) *MockIClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessages provides a mock function with given fields: messageIDs
func (_m *MockIClient) DeleteMessages(messageIDs []int) error {
	ret := _m.Called(messageIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(messageIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIClient_DeleteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessages'
type MockIClient_DeleteMessages_Call struct {
	*mock.Call
}

// DeleteMessages is a helper method to define mock.On call
//   - messageIDs []int
func (_e *MockIClient_Expecter) DeleteMessages(messageIDs interface{}) *MockIClient_DeleteMessages_Call {
	return &MockIClient_DeleteMessages_Call{Call: _e.mock.On("DeleteMessages", messageIDs)}
}

func (_c *MockIClient_DeleteMessages_Call) Run(run func(messageIDs []int)) *MockIClient_DeleteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockIClient_DeleteMessages_Call) Return(_a0 error) *MockIClient_DeleteMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_DeleteMessages_Call) RunAndReturn(run func([]int) error) *MockIClient_DeleteMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelID provides a mock function with given fields:
func (_m *MockIClient) GetChannelID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannelID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockIClient_GetChannelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelID'
type MockIClient_GetChannelID_Call struct {
	*mock.Call
}

// GetChannelID is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetChannelID() *MockIClient_GetChannelID_Call {
	return &MockIClient_GetChannelID_Call{Call: _e.mock.On("GetChannelID")}
}

func (_c *MockIClient_GetChannelID_Call) Run(run func()) *MockIClient_GetChannelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetChannelID_Call) Return(_a0 int64) *MockIClient_GetChannelID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_GetChannelID_Call) RunAndReturn(run func() int64) *MockIClient_GetChannelID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDispatcher provides a mock function with given fields:
func (_m *MockIClient) GetDispatcher() dispatcher.Dispatcher {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDispatcher")
	}

	var r0 dispatcher.Dispatcher
	if rf, ok := ret.Get(0).(func() dispatcher.Dispatcher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dispatcher.Dispatcher)
		}
	}

	return r0
}

// MockIClient_GetDispatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDispatcher'
type MockIClient_GetDispatcher_Call struct {
	*mock.Call
}

// GetDispatcher is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetDispatcher() *MockIClient_GetDispatcher_Call {
	return &MockIClient_GetDispatcher_Call{Call: _e.mock.On("GetDispatcher")}
}

func (_c *MockIClient_GetDispatcher_Call) Run(run func()) *MockIClient_GetDispatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetDispatcher_Call) Return(_a0 dispatcher.Dispatcher) *MockIClient_GetDispatcher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_GetDispatcher_Call) RunAndReturn(run func() dispatcher.Dispatcher) *MockIClient_GetDispatcher_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogger provides a mock function with given fields:
func (_m *MockIClient) GetLogger() *logrus.Entry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func() *logrus.Entry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// MockIClient_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type MockIClient_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetLogger() *MockIClient_GetLogger_Call {
	return &MockIClient_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *MockIClient_GetLogger_Call) Run(run func()) *MockIClient_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetLogger_Call) Return(_a0 *logrus.Entry) *MockIClient_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_GetLogger_Call) RunAndReturn(run func() *logrus.Entry) *MockIClient_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockIClient) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIClient_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockIClient_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockIClient_Expecter) GetName() *MockIClient_GetName_Call {
	return &MockIClient_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockIClient_GetName_Call) Run(run func()) *MockIClient_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_GetName_Call) Return(_a0 string) *MockIClient_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_GetName_Call) RunAndReturn(run func() string) *MockIClient_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Idle provides a mock function with given fields:
func (_m *MockIClient) Idle() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Idle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIClient_Idle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Idle'
type MockIClient_Idle_Call struct {
	*mock.Call
}

// Idle is a helper method to define mock.On call
func (_e *MockIClient_Expecter) Idle() *MockIClient_Idle_Call {
	return &MockIClient_Idle_Call{Call: _e.mock.On("Idle")}
}

func (_c *MockIClient_Idle_Call) Run(run func()) *MockIClient_Idle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIClient_Idle_Call) Return(_a0 error) *MockIClient_Idle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIClient_Idle_Call) RunAndReturn(run func() error) *MockIClient_Idle_Call {
	_c.Call.Return(run)
	return _c
}

// UploadGetFile provides a mock function with given fields: ctx, request
func (_m *MockIClient) UploadGetFile(ctx context.Context, request *tg.UploadGetFileRequest) (tg.UploadFileClass, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UploadGetFile")
	}

	var r0 tg.UploadFileClass
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tg.UploadGetFileRequest) (tg.UploadFileClass, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tg.UploadGetFileRequest) tg.UploadFileClass); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tg.UploadFileClass)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tg.UploadGetFileRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIClient_UploadGetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadGetFile'
type MockIClient_UploadGetFile_Call struct {
	*mock.Call
}

// UploadGetFile is a helper method to define mock.On call
//   - ctx context.Context
//   - request *tg.UploadGetFileRequest
func (_e *MockIClient_Expecter) UploadGetFile(ctx interface{}, request interface{}) *MockIClient_UploadGetFile_Call {
	return &MockIClient_UploadGetFile_Call{Call: _e.mock.On("UploadGetFile", ctx, request)}
}

func (_c *MockIClient_UploadGetFile_Call) Run(run func(ctx context.Context, request *tg.UploadGetFileRequest)) *MockIClient_UploadGetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*tg.UploadGetFileRequest))
	})
	return _c
}

func (_c *MockIClient_UploadGetFile_Call) Return(_a0 tg.UploadFileClass, _a1 error) *MockIClient_UploadGetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIClient_UploadGetFile_Call) RunAndReturn(run func(context.Context, *tg.UploadGetFileRequest) (tg.UploadFileClass, error)) *MockIClient_UploadGetFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIClient creates a new instance of MockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClient {
	mock := &MockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
