// Code generated by MockGen. DO NOT EDIT.
// Source: facade.go
//
// Generated by this command:
//
//	mockgen -source=facade.go -destination=../../mocks/facade/facade.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongo "github.com/amirdaaee/TGMon/internal/db/mongo"
	facade "github.com/amirdaaee/TGMon/internal/facade"
	bson "go.mongodb.org/mongo-driver/v2/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockICrud is a mock of ICrud interface.
type MockICrud[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockICrudMockRecorder[T]
	isgomock struct{}
}

// MockICrudMockRecorder is the mock recorder for MockICrud.
type MockICrudMockRecorder[T any] struct {
	mock *MockICrud[T]
}

// NewMockICrud creates a new mock instance.
func NewMockICrud[T any](ctrl *gomock.Controller) *MockICrud[T] {
	mock := &MockICrud[T]{ctrl: ctrl}
	mock.recorder = &MockICrudMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICrud[T]) EXPECT() *MockICrudMockRecorder[T] {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockICrud[T]) GetCollection() mongo.ICollection[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(mongo.ICollection[T])
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockICrudMockRecorder[T]) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockICrud[T])(nil).GetCollection))
}

// PostCreate mocks base method.
func (m *MockICrud[T]) PostCreate(ctx context.Context, doc *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCreate", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostCreate indicates an expected call of PostCreate.
func (mr *MockICrudMockRecorder[T]) PostCreate(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCreate", reflect.TypeOf((*MockICrud[T])(nil).PostCreate), ctx, doc)
}

// PostDelete mocks base method.
func (m *MockICrud[T]) PostDelete(ctx context.Context, doc *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDelete", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDelete indicates an expected call of PostDelete.
func (mr *MockICrudMockRecorder[T]) PostDelete(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDelete", reflect.TypeOf((*MockICrud[T])(nil).PostDelete), ctx, doc)
}

// PreCreate mocks base method.
func (m *MockICrud[T]) PreCreate(ctx context.Context, doc *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCreate", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreCreate indicates an expected call of PreCreate.
func (mr *MockICrudMockRecorder[T]) PreCreate(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCreate", reflect.TypeOf((*MockICrud[T])(nil).PreCreate), ctx, doc)
}

// PreDelete mocks base method.
func (m *MockICrud[T]) PreDelete(ctx context.Context, doc *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreDelete", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreDelete indicates an expected call of PreDelete.
func (mr *MockICrudMockRecorder[T]) PreDelete(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreDelete", reflect.TypeOf((*MockICrud[T])(nil).PreDelete), ctx, doc)
}

// MockIFacade is a mock of IFacade interface.
type MockIFacade[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIFacadeMockRecorder[T]
	isgomock struct{}
}

// MockIFacadeMockRecorder is the mock recorder for MockIFacade.
type MockIFacadeMockRecorder[T any] struct {
	mock *MockIFacade[T]
}

// NewMockIFacade creates a new mock instance.
func NewMockIFacade[T any](ctrl *gomock.Controller) *MockIFacade[T] {
	mock := &MockIFacade[T]{ctrl: ctrl}
	mock.recorder = &MockIFacadeMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFacade[T]) EXPECT() *MockIFacadeMockRecorder[T] {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockIFacade[T]) CreateOne(ctx context.Context, doc *T) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, doc)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockIFacadeMockRecorder[T]) CreateOne(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockIFacade[T])(nil).CreateOne), ctx, doc)
}

// DeleteOne mocks base method.
func (m *MockIFacade[T]) DeleteOne(ctx context.Context, filter *bson.D) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockIFacadeMockRecorder[T]) DeleteOne(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockIFacade[T])(nil).DeleteOne), ctx, filter)
}

// GetCRD mocks base method.
func (m *MockIFacade[T]) GetCRD() facade.ICrud[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRD")
	ret0, _ := ret[0].(facade.ICrud[T])
	return ret0
}

// GetCRD indicates an expected call of GetCRD.
func (mr *MockIFacadeMockRecorder[T]) GetCRD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRD", reflect.TypeOf((*MockIFacade[T])(nil).GetCRD))
}

// Read mocks base method.
func (m *MockIFacade[T]) Read(ctx context.Context, filter *bson.D) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, filter)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIFacadeMockRecorder[T]) Read(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIFacade[T])(nil).Read), ctx, filter)
}
