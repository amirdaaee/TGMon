// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIMongoDatabase is an autogenerated mock type for the IMongoDatabase type
type MockIMongoDatabase struct {
	mock.Mock
}

type MockIMongoDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMongoDatabase) EXPECT() *MockIMongoDatabase_Expecter {
	return &MockIMongoDatabase_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, pipeline, opts
func (_m *MockIMongoDatabase) Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.AggregateOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoDatabase_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockIMongoDatabase_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.AggregateOptions
func (_e *MockIMongoDatabase_Expecter) Aggregate(ctx interface{}, pipeline interface{}, opts ...interface{}) *MockIMongoDatabase_Aggregate_Call {
	return &MockIMongoDatabase_Aggregate_Call{Call: _e.mock.On("Aggregate",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *MockIMongoDatabase_Aggregate_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions)) *MockIMongoDatabase_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.AggregateOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.AggregateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_Aggregate_Call) Return(_a0 *mongo.Cursor, _a1 error) *MockIMongoDatabase_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDatabase_Aggregate_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.AggregateOptions) (*mongo.Cursor, error)) *MockIMongoDatabase_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// Client provides a mock function with given fields:
func (_m *MockIMongoDatabase) Client() *mongo.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// MockIMongoDatabase_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockIMongoDatabase_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockIMongoDatabase_Expecter) Client() *MockIMongoDatabase_Client_Call {
	return &MockIMongoDatabase_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockIMongoDatabase_Client_Call) Run(run func()) *MockIMongoDatabase_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoDatabase_Client_Call) Return(_a0 *mongo.Client) *MockIMongoDatabase_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_Client_Call) RunAndReturn(run func() *mongo.Client) *MockIMongoDatabase_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function with given fields: name, opts
func (_m *MockIMongoDatabase) Collection(name string, opts ...*options.CollectionOptions) *mongo.Collection {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string, ...*options.CollectionOptions) *mongo.Collection); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// MockIMongoDatabase_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockIMongoDatabase_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - name string
//   - opts ...*options.CollectionOptions
func (_e *MockIMongoDatabase_Expecter) Collection(name interface{}, opts ...interface{}) *MockIMongoDatabase_Collection_Call {
	return &MockIMongoDatabase_Collection_Call{Call: _e.mock.On("Collection",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockIMongoDatabase_Collection_Call) Run(run func(name string, opts ...*options.CollectionOptions)) *MockIMongoDatabase_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CollectionOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CollectionOptions)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_Collection_Call) Return(_a0 *mongo.Collection) *MockIMongoDatabase_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_Collection_Call) RunAndReturn(run func(string, ...*options.CollectionOptions) *mongo.Collection) *MockIMongoDatabase_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: ctx, name, opts
func (_m *MockIMongoDatabase) CreateCollection(ctx context.Context, name string, opts ...*options.CreateCollectionOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.CreateCollectionOptions) error); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMongoDatabase_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockIMongoDatabase_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts ...*options.CreateCollectionOptions
func (_e *MockIMongoDatabase_Expecter) CreateCollection(ctx interface{}, name interface{}, opts ...interface{}) *MockIMongoDatabase_CreateCollection_Call {
	return &MockIMongoDatabase_CreateCollection_Call{Call: _e.mock.On("CreateCollection",
		append([]interface{}{ctx, name}, opts...)...)}
}

func (_c *MockIMongoDatabase_CreateCollection_Call) Run(run func(ctx context.Context, name string, opts ...*options.CreateCollectionOptions)) *MockIMongoDatabase_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateCollectionOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateCollectionOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_CreateCollection_Call) Return(_a0 error) *MockIMongoDatabase_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_CreateCollection_Call) RunAndReturn(run func(context.Context, string, ...*options.CreateCollectionOptions) error) *MockIMongoDatabase_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateView provides a mock function with given fields: ctx, viewName, viewOn, pipeline, opts
func (_m *MockIMongoDatabase) CreateView(ctx context.Context, viewName string, viewOn string, pipeline interface{}, opts ...*options.CreateViewOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, viewName, viewOn, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateView")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...*options.CreateViewOptions) error); ok {
		r0 = rf(ctx, viewName, viewOn, pipeline, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMongoDatabase_CreateView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateView'
type MockIMongoDatabase_CreateView_Call struct {
	*mock.Call
}

// CreateView is a helper method to define mock.On call
//   - ctx context.Context
//   - viewName string
//   - viewOn string
//   - pipeline interface{}
//   - opts ...*options.CreateViewOptions
func (_e *MockIMongoDatabase_Expecter) CreateView(ctx interface{}, viewName interface{}, viewOn interface{}, pipeline interface{}, opts ...interface{}) *MockIMongoDatabase_CreateView_Call {
	return &MockIMongoDatabase_CreateView_Call{Call: _e.mock.On("CreateView",
		append([]interface{}{ctx, viewName, viewOn, pipeline}, opts...)...)}
}

func (_c *MockIMongoDatabase_CreateView_Call) Run(run func(ctx context.Context, viewName string, viewOn string, pipeline interface{}, opts ...*options.CreateViewOptions)) *MockIMongoDatabase_CreateView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateViewOptions, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateViewOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_CreateView_Call) Return(_a0 error) *MockIMongoDatabase_CreateView_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_CreateView_Call) RunAndReturn(run func(context.Context, string, string, interface{}, ...*options.CreateViewOptions) error) *MockIMongoDatabase_CreateView_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *MockIMongoDatabase) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMongoDatabase_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type MockIMongoDatabase_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIMongoDatabase_Expecter) Drop(ctx interface{}) *MockIMongoDatabase_Drop_Call {
	return &MockIMongoDatabase_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *MockIMongoDatabase_Drop_Call) Run(run func(ctx context.Context)) *MockIMongoDatabase_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIMongoDatabase_Drop_Call) Return(_a0 error) *MockIMongoDatabase_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_Drop_Call) RunAndReturn(run func(context.Context) error) *MockIMongoDatabase_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollectionNames provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoDatabase) ListCollectionNames(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollectionNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) ([]string, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) []string); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoDatabase_ListCollectionNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollectionNames'
type MockIMongoDatabase_ListCollectionNames_Call struct {
	*mock.Call
}

// ListCollectionNames is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.ListCollectionsOptions
func (_e *MockIMongoDatabase_Expecter) ListCollectionNames(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoDatabase_ListCollectionNames_Call {
	return &MockIMongoDatabase_ListCollectionNames_Call{Call: _e.mock.On("ListCollectionNames",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoDatabase_ListCollectionNames_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions)) *MockIMongoDatabase_ListCollectionNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListCollectionsOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListCollectionsOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_ListCollectionNames_Call) Return(_a0 []string, _a1 error) *MockIMongoDatabase_ListCollectionNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDatabase_ListCollectionNames_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ListCollectionsOptions) ([]string, error)) *MockIMongoDatabase_ListCollectionNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollectionSpecifications provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoDatabase) ListCollectionSpecifications(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions) ([]*mongo.CollectionSpecification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollectionSpecifications")
	}

	var r0 []*mongo.CollectionSpecification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) ([]*mongo.CollectionSpecification, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) []*mongo.CollectionSpecification); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mongo.CollectionSpecification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoDatabase_ListCollectionSpecifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollectionSpecifications'
type MockIMongoDatabase_ListCollectionSpecifications_Call struct {
	*mock.Call
}

// ListCollectionSpecifications is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.ListCollectionsOptions
func (_e *MockIMongoDatabase_Expecter) ListCollectionSpecifications(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoDatabase_ListCollectionSpecifications_Call {
	return &MockIMongoDatabase_ListCollectionSpecifications_Call{Call: _e.mock.On("ListCollectionSpecifications",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoDatabase_ListCollectionSpecifications_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions)) *MockIMongoDatabase_ListCollectionSpecifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListCollectionsOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListCollectionsOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_ListCollectionSpecifications_Call) Return(_a0 []*mongo.CollectionSpecification, _a1 error) *MockIMongoDatabase_ListCollectionSpecifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDatabase_ListCollectionSpecifications_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ListCollectionsOptions) ([]*mongo.CollectionSpecification, error)) *MockIMongoDatabase_ListCollectionSpecifications_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoDatabase) ListCollections(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ListCollectionsOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoDatabase_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type MockIMongoDatabase_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.ListCollectionsOptions
func (_e *MockIMongoDatabase_Expecter) ListCollections(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoDatabase_ListCollections_Call {
	return &MockIMongoDatabase_ListCollections_Call{Call: _e.mock.On("ListCollections",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoDatabase_ListCollections_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.ListCollectionsOptions)) *MockIMongoDatabase_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListCollectionsOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListCollectionsOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_ListCollections_Call) Return(_a0 *mongo.Cursor, _a1 error) *MockIMongoDatabase_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDatabase_ListCollections_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ListCollectionsOptions) (*mongo.Cursor, error)) *MockIMongoDatabase_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockIMongoDatabase) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIMongoDatabase_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockIMongoDatabase_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockIMongoDatabase_Expecter) Name() *MockIMongoDatabase_Name_Call {
	return &MockIMongoDatabase_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockIMongoDatabase_Name_Call) Run(run func()) *MockIMongoDatabase_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoDatabase_Name_Call) Return(_a0 string) *MockIMongoDatabase_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_Name_Call) RunAndReturn(run func() string) *MockIMongoDatabase_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommand provides a mock function with given fields: ctx, runCommand, opts
func (_m *MockIMongoDatabase) RunCommand(ctx context.Context, runCommand interface{}, opts ...*options.RunCmdOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, runCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunCommand")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.RunCmdOptions) *mongo.SingleResult); ok {
		r0 = rf(ctx, runCommand, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// MockIMongoDatabase_RunCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommand'
type MockIMongoDatabase_RunCommand_Call struct {
	*mock.Call
}

// RunCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - runCommand interface{}
//   - opts ...*options.RunCmdOptions
func (_e *MockIMongoDatabase_Expecter) RunCommand(ctx interface{}, runCommand interface{}, opts ...interface{}) *MockIMongoDatabase_RunCommand_Call {
	return &MockIMongoDatabase_RunCommand_Call{Call: _e.mock.On("RunCommand",
		append([]interface{}{ctx, runCommand}, opts...)...)}
}

func (_c *MockIMongoDatabase_RunCommand_Call) Run(run func(ctx context.Context, runCommand interface{}, opts ...*options.RunCmdOptions)) *MockIMongoDatabase_RunCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.RunCmdOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.RunCmdOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_RunCommand_Call) Return(_a0 *mongo.SingleResult) *MockIMongoDatabase_RunCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDatabase_RunCommand_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.RunCmdOptions) *mongo.SingleResult) *MockIMongoDatabase_RunCommand_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommandCursor provides a mock function with given fields: ctx, runCommand, opts
func (_m *MockIMongoDatabase) RunCommandCursor(ctx context.Context, runCommand interface{}, opts ...*options.RunCmdOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, runCommand)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunCommandCursor")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.RunCmdOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, runCommand, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.RunCmdOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, runCommand, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.RunCmdOptions) error); ok {
		r1 = rf(ctx, runCommand, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoDatabase_RunCommandCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommandCursor'
type MockIMongoDatabase_RunCommandCursor_Call struct {
	*mock.Call
}

// RunCommandCursor is a helper method to define mock.On call
//   - ctx context.Context
//   - runCommand interface{}
//   - opts ...*options.RunCmdOptions
func (_e *MockIMongoDatabase_Expecter) RunCommandCursor(ctx interface{}, runCommand interface{}, opts ...interface{}) *MockIMongoDatabase_RunCommandCursor_Call {
	return &MockIMongoDatabase_RunCommandCursor_Call{Call: _e.mock.On("RunCommandCursor",
		append([]interface{}{ctx, runCommand}, opts...)...)}
}

func (_c *MockIMongoDatabase_RunCommandCursor_Call) Run(run func(ctx context.Context, runCommand interface{}, opts ...*options.RunCmdOptions)) *MockIMongoDatabase_RunCommandCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.RunCmdOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.RunCmdOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_RunCommandCursor_Call) Return(_a0 *mongo.Cursor, _a1 error) *MockIMongoDatabase_RunCommandCursor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDatabase_RunCommandCursor_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.RunCmdOptions) (*mongo.Cursor, error)) *MockIMongoDatabase_RunCommandCursor_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, pipeline, opts
func (_m *MockIMongoDatabase) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) *mongo.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoDatabase_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockIMongoDatabase_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *MockIMongoDatabase_Expecter) Watch(ctx interface{}, pipeline interface{}, opts ...interface{}) *MockIMongoDatabase_Watch_Call {
	return &MockIMongoDatabase_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *MockIMongoDatabase_Watch_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *MockIMongoDatabase_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoDatabase_Watch_Call) Return(_a0 *mongo.ChangeStream, _a1 error) *MockIMongoDatabase_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDatabase_Watch_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)) *MockIMongoDatabase_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMongoDatabase creates a new instance of MockIMongoDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMongoDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMongoDatabase {
	mock := &MockIMongoDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
