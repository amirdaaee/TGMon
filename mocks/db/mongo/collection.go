// Code generated by MockGen. DO NOT EDIT.
// Source: collection.go
//
// Generated by this command:
//
//	mockgen -source=collection.go -destination=../../../mocks/db/mongo/collection.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	aggregator "github.com/chenmingyong0423/go-mongox/v2/aggregator"
	creator "github.com/chenmingyong0423/go-mongox/v2/creator"
	deleter "github.com/chenmingyong0423/go-mongox/v2/deleter"
	finder "github.com/chenmingyong0423/go-mongox/v2/finder"
	updater "github.com/chenmingyong0423/go-mongox/v2/updater"
	gomock "go.uber.org/mock/gomock"
)

// MockICollection is a mock of ICollection interface.
type MockICollection[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionMockRecorder[T]
	isgomock struct{}
}

// MockICollectionMockRecorder is the mock recorder for MockICollection.
type MockICollectionMockRecorder[T any] struct {
	mock *MockICollection[T]
}

// NewMockICollection creates a new mock instance.
func NewMockICollection[T any](ctrl *gomock.Controller) *MockICollection[T] {
	mock := &MockICollection[T]{ctrl: ctrl}
	mock.recorder = &MockICollectionMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollection[T]) EXPECT() *MockICollectionMockRecorder[T] {
	return m.recorder
}

// Aggregator mocks base method.
func (m *MockICollection[T]) Aggregator() aggregator.IAggregator[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregator")
	ret0, _ := ret[0].(aggregator.IAggregator[T])
	return ret0
}

// Aggregator indicates an expected call of Aggregator.
func (mr *MockICollectionMockRecorder[T]) Aggregator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregator", reflect.TypeOf((*MockICollection[T])(nil).Aggregator))
}

// Creator mocks base method.
func (m *MockICollection[T]) Creator() creator.ICreator[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creator")
	ret0, _ := ret[0].(creator.ICreator[T])
	return ret0
}

// Creator indicates an expected call of Creator.
func (mr *MockICollectionMockRecorder[T]) Creator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creator", reflect.TypeOf((*MockICollection[T])(nil).Creator))
}

// Deleter mocks base method.
func (m *MockICollection[T]) Deleter() deleter.IDeleter[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleter")
	ret0, _ := ret[0].(deleter.IDeleter[T])
	return ret0
}

// Deleter indicates an expected call of Deleter.
func (mr *MockICollectionMockRecorder[T]) Deleter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleter", reflect.TypeOf((*MockICollection[T])(nil).Deleter))
}

// Finder mocks base method.
func (m *MockICollection[T]) Finder() finder.IFinder[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finder")
	ret0, _ := ret[0].(finder.IFinder[T])
	return ret0
}

// Finder indicates an expected call of Finder.
func (mr *MockICollectionMockRecorder[T]) Finder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finder", reflect.TypeOf((*MockICollection[T])(nil).Finder))
}

// Updater mocks base method.
func (m *MockICollection[T]) Updater() updater.IUpdater[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updater")
	ret0, _ := ret[0].(updater.IUpdater[T])
	return ret0
}

// Updater indicates an expected call of Updater.
func (mr *MockICollectionMockRecorder[T]) Updater() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updater", reflect.TypeOf((*MockICollection[T])(nil).Updater))
}
