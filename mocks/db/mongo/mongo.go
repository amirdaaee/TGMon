// Code generated by MockGen. DO NOT EDIT.
// Source: mongo.go
//
// Generated by this command:
//
//	mockgen -source=mongo.go -destination=../../../mocks/db/mongo/mongo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongo "github.com/amirdaaee/TGMon/internal/db/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockIMongoClient is a mock of IMongoClient interface.
type MockIMongoClient struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoClientMockRecorder
	isgomock struct{}
}

// MockIMongoClientMockRecorder is the mock recorder for MockIMongoClient.
type MockIMongoClientMockRecorder struct {
	mock *MockIMongoClient
}

// NewMockIMongoClient creates a new mock instance.
func NewMockIMongoClient(ctrl *gomock.Controller) *MockIMongoClient {
	mock := &MockIMongoClient{ctrl: ctrl}
	mock.recorder = &MockIMongoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMongoClient) EXPECT() *MockIMongoClientMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockIMongoClient) Disconnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockIMongoClientMockRecorder) Disconnect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockIMongoClient)(nil).Disconnect), arg0)
}

// NewDatabase mocks base method.
func (m *MockIMongoClient) NewDatabase(arg0 string) mongo.IDatabase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDatabase", arg0)
	ret0, _ := ret[0].(mongo.IDatabase)
	return ret0
}

// NewDatabase indicates an expected call of NewDatabase.
func (mr *MockIMongoClientMockRecorder) NewDatabase(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDatabase", reflect.TypeOf((*MockIMongoClient)(nil).NewDatabase), arg0)
}

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
	isgomock struct{}
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}
