// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIMongoClient is an autogenerated mock type for the IMongoClient type
type MockIMongoClient struct {
	mock.Mock
}

type MockIMongoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMongoClient) EXPECT() *MockIMongoClient_Expecter {
	return &MockIMongoClient_Expecter{mock: &_m.Mock}
}

// Database provides a mock function with given fields: name, opts
func (_m *MockIMongoClient) Database(name string, opts ...*options.DatabaseOptions) *mongo.Database {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func(string, ...*options.DatabaseOptions) *mongo.Database); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// MockIMongoClient_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockIMongoClient_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
//   - name string
//   - opts ...*options.DatabaseOptions
func (_e *MockIMongoClient_Expecter) Database(name interface{}, opts ...interface{}) *MockIMongoClient_Database_Call {
	return &MockIMongoClient_Database_Call{Call: _e.mock.On("Database",
		append([]interface{}{name}, opts...)...)}
}

func (_c *MockIMongoClient_Database_Call) Run(run func(name string, opts ...*options.DatabaseOptions)) *MockIMongoClient_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DatabaseOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DatabaseOptions)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoClient_Database_Call) Return(_a0 *mongo.Database) *MockIMongoClient_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoClient_Database_Call) RunAndReturn(run func(string, ...*options.DatabaseOptions) *mongo.Database) *MockIMongoClient_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: _a0
func (_m *MockIMongoClient) Disconnect(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMongoClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockIMongoClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockIMongoClient_Expecter) Disconnect(_a0 interface{}) *MockIMongoClient_Disconnect_Call {
	return &MockIMongoClient_Disconnect_Call{Call: _e.mock.On("Disconnect", _a0)}
}

func (_c *MockIMongoClient_Disconnect_Call) Run(run func(_a0 context.Context)) *MockIMongoClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIMongoClient_Disconnect_Call) Return(_a0 error) *MockIMongoClient_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoClient_Disconnect_Call) RunAndReturn(run func(context.Context) error) *MockIMongoClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMongoClient creates a new instance of MockIMongoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMongoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMongoClient {
	mock := &MockIMongoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
