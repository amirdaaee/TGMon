// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	context "context"

	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// MockIMinioCl is an autogenerated mock type for the IMinioCl type
type MockIMinioCl struct {
	mock.Mock
}

type MockIMinioCl_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMinioCl) EXPECT() *MockIMinioCl_Expecter {
	return &MockIMinioCl_Expecter{mock: &_m.Mock}
}

// BucketExists provides a mock function with given fields: ctx, bucketName
func (_m *MockIMinioCl) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	ret := _m.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for BucketExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, bucketName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMinioCl_BucketExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BucketExists'
type MockIMinioCl_BucketExists_Call struct {
	*mock.Call
}

// BucketExists is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
func (_e *MockIMinioCl_Expecter) BucketExists(ctx interface{}, bucketName interface{}) *MockIMinioCl_BucketExists_Call {
	return &MockIMinioCl_BucketExists_Call{Call: _e.mock.On("BucketExists", ctx, bucketName)}
}

func (_c *MockIMinioCl_BucketExists_Call) Run(run func(ctx context.Context, bucketName string)) *MockIMinioCl_BucketExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIMinioCl_BucketExists_Call) Return(_a0 bool, _a1 error) *MockIMinioCl_BucketExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMinioCl_BucketExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockIMinioCl_BucketExists_Call {
	_c.Call.Return(run)
	return _c
}

// MakeBucket provides a mock function with given fields: ctx, bucketName, opts
func (_m *MockIMinioCl) MakeBucket(ctx context.Context, bucketName string, opts minio.MakeBucketOptions) error {
	ret := _m.Called(ctx, bucketName, opts)

	if len(ret) == 0 {
		panic("no return value specified for MakeBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, minio.MakeBucketOptions) error); ok {
		r0 = rf(ctx, bucketName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMinioCl_MakeBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeBucket'
type MockIMinioCl_MakeBucket_Call struct {
	*mock.Call
}

// MakeBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - opts minio.MakeBucketOptions
func (_e *MockIMinioCl_Expecter) MakeBucket(ctx interface{}, bucketName interface{}, opts interface{}) *MockIMinioCl_MakeBucket_Call {
	return &MockIMinioCl_MakeBucket_Call{Call: _e.mock.On("MakeBucket", ctx, bucketName, opts)}
}

func (_c *MockIMinioCl_MakeBucket_Call) Run(run func(ctx context.Context, bucketName string, opts minio.MakeBucketOptions)) *MockIMinioCl_MakeBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(minio.MakeBucketOptions))
	})
	return _c
}

func (_c *MockIMinioCl_MakeBucket_Call) Return(err error) *MockIMinioCl_MakeBucket_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIMinioCl_MakeBucket_Call) RunAndReturn(run func(context.Context, string, minio.MakeBucketOptions) error) *MockIMinioCl_MakeBucket_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize, opts
func (_m *MockIMinioCl) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName, reader, objectSize, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMinioCl_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockIMinioCl_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
//   - opts minio.PutObjectOptions
func (_e *MockIMinioCl_Expecter) PutObject(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}, opts interface{}) *MockIMinioCl_PutObject_Call {
	return &MockIMinioCl_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucketName, objectName, reader, objectSize, opts)}
}

func (_c *MockIMinioCl_PutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions)) *MockIMinioCl_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64), args[5].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MockIMinioCl_PutObject_Call) Return(info minio.UploadInfo, err error) *MockIMinioCl_PutObject_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockIMinioCl_PutObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)) *MockIMinioCl_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MockIMinioCl) RemoveObject(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.RemoveObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMinioCl_RemoveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveObject'
type MockIMinioCl_RemoveObject_Call struct {
	*mock.Call
}

// RemoveObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.RemoveObjectOptions
func (_e *MockIMinioCl_Expecter) RemoveObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MockIMinioCl_RemoveObject_Call {
	return &MockIMinioCl_RemoveObject_Call{Call: _e.mock.On("RemoveObject", ctx, bucketName, objectName, opts)}
}

func (_c *MockIMinioCl_RemoveObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions)) *MockIMinioCl_RemoveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.RemoveObjectOptions))
	})
	return _c
}

func (_c *MockIMinioCl_RemoveObject_Call) Return(_a0 error) *MockIMinioCl_RemoveObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMinioCl_RemoveObject_Call) RunAndReturn(run func(context.Context, string, string, minio.RemoveObjectOptions) error) *MockIMinioCl_RemoveObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMinioCl creates a new instance of MockIMinioCl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMinioCl(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMinioCl {
	mock := &MockIMinioCl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
