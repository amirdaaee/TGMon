// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIMongoCollection is an autogenerated mock type for the IMongoCollection type
type MockIMongoCollection struct {
	mock.Mock
}

type MockIMongoCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMongoCollection) EXPECT() *MockIMongoCollection_Expecter {
	return &MockIMongoCollection_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, pipeline, opts
func (_m *MockIMongoCollection) Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.AggregateOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.AggregateOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockIMongoCollection_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.AggregateOptions
func (_e *MockIMongoCollection_Expecter) Aggregate(ctx interface{}, pipeline interface{}, opts ...interface{}) *MockIMongoCollection_Aggregate_Call {
	return &MockIMongoCollection_Aggregate_Call{Call: _e.mock.On("Aggregate",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *MockIMongoCollection_Aggregate_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions)) *MockIMongoCollection_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.AggregateOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.AggregateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_Aggregate_Call) Return(_a0 *mongo.Cursor, _a1 error) *MockIMongoCollection_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_Aggregate_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.AggregateOptions) (*mongo.Cursor, error)) *MockIMongoCollection_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// BulkWrite provides a mock function with given fields: ctx, models, opts
func (_m *MockIMongoCollection) BulkWrite(ctx context.Context, models []mongo.WriteModel, opts ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, models)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BulkWrite")
	}

	var r0 *mongo.BulkWriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error)); ok {
		return rf(ctx, models, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) *mongo.BulkWriteResult); ok {
		r0 = rf(ctx, models, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.BulkWriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) error); ok {
		r1 = rf(ctx, models, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_BulkWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkWrite'
type MockIMongoCollection_BulkWrite_Call struct {
	*mock.Call
}

// BulkWrite is a helper method to define mock.On call
//   - ctx context.Context
//   - models []mongo.WriteModel
//   - opts ...*options.BulkWriteOptions
func (_e *MockIMongoCollection_Expecter) BulkWrite(ctx interface{}, models interface{}, opts ...interface{}) *MockIMongoCollection_BulkWrite_Call {
	return &MockIMongoCollection_BulkWrite_Call{Call: _e.mock.On("BulkWrite",
		append([]interface{}{ctx, models}, opts...)...)}
}

func (_c *MockIMongoCollection_BulkWrite_Call) Run(run func(ctx context.Context, models []mongo.WriteModel, opts ...*options.BulkWriteOptions)) *MockIMongoCollection_BulkWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.BulkWriteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.BulkWriteOptions)
			}
		}
		run(args[0].(context.Context), args[1].([]mongo.WriteModel), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_BulkWrite_Call) Return(_a0 *mongo.BulkWriteResult, _a1 error) *MockIMongoCollection_BulkWrite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_BulkWrite_Call) RunAndReturn(run func(context.Context, []mongo.WriteModel, ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error)) *MockIMongoCollection_BulkWrite_Call {
	_c.Call.Return(run)
	return _c
}

// CountDocuments provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoCollection) CountDocuments(ctx context.Context, filter interface{}, opts ...*options.CountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) (int64, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type MockIMongoCollection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.CountOptions
func (_e *MockIMongoCollection_Expecter) CountDocuments(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_CountDocuments_Call {
	return &MockIMongoCollection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_CountDocuments_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.CountOptions)) *MockIMongoCollection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CountOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CountOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_CountDocuments_Call) Return(_a0 int64, _a1 error) *MockIMongoCollection_CountDocuments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_CountDocuments_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.CountOptions) (int64, error)) *MockIMongoCollection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with given fields:
func (_m *MockIMongoCollection) Database() *mongo.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func() *mongo.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// MockIMongoCollection_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockIMongoCollection_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
func (_e *MockIMongoCollection_Expecter) Database() *MockIMongoCollection_Database_Call {
	return &MockIMongoCollection_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *MockIMongoCollection_Database_Call) Run(run func()) *MockIMongoCollection_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoCollection_Database_Call) Return(_a0 *mongo.Database) *MockIMongoCollection_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_Database_Call) RunAndReturn(run func() *mongo.Database) *MockIMongoCollection_Database_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoCollection) DeleteMany(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) *mongo.DeleteResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type MockIMongoCollection_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.DeleteOptions
func (_e *MockIMongoCollection_Expecter) DeleteMany(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_DeleteMany_Call {
	return &MockIMongoCollection_DeleteMany_Call{Call: _e.mock.On("DeleteMany",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_DeleteMany_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions)) *MockIMongoCollection_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DeleteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DeleteOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_DeleteMany_Call) Return(_a0 *mongo.DeleteResult, _a1 error) *MockIMongoCollection_DeleteMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_DeleteMany_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)) *MockIMongoCollection_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoCollection) DeleteOne(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) *mongo.DeleteResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockIMongoCollection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.DeleteOptions
func (_e *MockIMongoCollection_Expecter) DeleteOne(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_DeleteOne_Call {
	return &MockIMongoCollection_DeleteOne_Call{Call: _e.mock.On("DeleteOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_DeleteOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions)) *MockIMongoCollection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DeleteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DeleteOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_DeleteOne_Call) Return(_a0 *mongo.DeleteResult, _a1 error) *MockIMongoCollection_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_DeleteOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.DeleteOptions) (*mongo.DeleteResult, error)) *MockIMongoCollection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Distinct provides a mock function with given fields: ctx, fieldName, filter, opts
func (_m *MockIMongoCollection) Distinct(ctx context.Context, fieldName string, filter interface{}, opts ...*options.DistinctOptions) ([]interface{}, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fieldName, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Distinct")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.DistinctOptions) ([]interface{}, error)); ok {
		return rf(ctx, fieldName, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.DistinctOptions) []interface{}); ok {
		r0 = rf(ctx, fieldName, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, ...*options.DistinctOptions) error); ok {
		r1 = rf(ctx, fieldName, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_Distinct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distinct'
type MockIMongoCollection_Distinct_Call struct {
	*mock.Call
}

// Distinct is a helper method to define mock.On call
//   - ctx context.Context
//   - fieldName string
//   - filter interface{}
//   - opts ...*options.DistinctOptions
func (_e *MockIMongoCollection_Expecter) Distinct(ctx interface{}, fieldName interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_Distinct_Call {
	return &MockIMongoCollection_Distinct_Call{Call: _e.mock.On("Distinct",
		append([]interface{}{ctx, fieldName, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_Distinct_Call) Run(run func(ctx context.Context, fieldName string, filter interface{}, opts ...*options.DistinctOptions)) *MockIMongoCollection_Distinct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.DistinctOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.DistinctOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_Distinct_Call) Return(_a0 []interface{}, _a1 error) *MockIMongoCollection_Distinct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_Distinct_Call) RunAndReturn(run func(context.Context, string, interface{}, ...*options.DistinctOptions) ([]interface{}, error)) *MockIMongoCollection_Distinct_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *MockIMongoCollection) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMongoCollection_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type MockIMongoCollection_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIMongoCollection_Expecter) Drop(ctx interface{}) *MockIMongoCollection_Drop_Call {
	return &MockIMongoCollection_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *MockIMongoCollection_Drop_Call) Run(run func(ctx context.Context)) *MockIMongoCollection_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIMongoCollection_Drop_Call) Return(_a0 error) *MockIMongoCollection_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_Drop_Call) RunAndReturn(run func(context.Context) error) *MockIMongoCollection_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// EstimatedDocumentCount provides a mock function with given fields: ctx, opts
func (_m *MockIMongoCollection) EstimatedDocumentCount(ctx context.Context, opts ...*options.EstimatedDocumentCountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EstimatedDocumentCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.EstimatedDocumentCountOptions) (int64, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*options.EstimatedDocumentCountOptions) int64); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*options.EstimatedDocumentCountOptions) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_EstimatedDocumentCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimatedDocumentCount'
type MockIMongoCollection_EstimatedDocumentCount_Call struct {
	*mock.Call
}

// EstimatedDocumentCount is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...*options.EstimatedDocumentCountOptions
func (_e *MockIMongoCollection_Expecter) EstimatedDocumentCount(ctx interface{}, opts ...interface{}) *MockIMongoCollection_EstimatedDocumentCount_Call {
	return &MockIMongoCollection_EstimatedDocumentCount_Call{Call: _e.mock.On("EstimatedDocumentCount",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockIMongoCollection_EstimatedDocumentCount_Call) Run(run func(ctx context.Context, opts ...*options.EstimatedDocumentCountOptions)) *MockIMongoCollection_EstimatedDocumentCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.EstimatedDocumentCountOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*options.EstimatedDocumentCountOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_EstimatedDocumentCount_Call) Return(_a0 int64, _a1 error) *MockIMongoCollection_EstimatedDocumentCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_EstimatedDocumentCount_Call) RunAndReturn(run func(context.Context, ...*options.EstimatedDocumentCountOptions) (int64, error)) *MockIMongoCollection_EstimatedDocumentCount_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoCollection) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockIMongoCollection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOptions
func (_e *MockIMongoCollection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_Find_Call {
	return &MockIMongoCollection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_Find_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOptions)) *MockIMongoCollection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_Find_Call) Return(cur *mongo.Cursor, err error) *MockIMongoCollection_Find_Call {
	_c.Call.Return(cur, err)
	return _c
}

func (_c *MockIMongoCollection_Find_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOptions) (*mongo.Cursor, error)) *MockIMongoCollection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoCollection) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneOptions) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// MockIMongoCollection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockIMongoCollection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOneOptions
func (_e *MockIMongoCollection_Expecter) FindOne(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_FindOne_Call {
	return &MockIMongoCollection_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_FindOne_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions)) *MockIMongoCollection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_FindOne_Call) Return(_a0 *mongo.SingleResult) *MockIMongoCollection_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_FindOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOneOptions) *mongo.SingleResult) *MockIMongoCollection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndDelete provides a mock function with given fields: ctx, filter, opts
func (_m *MockIMongoCollection) FindOneAndDelete(ctx context.Context, filter interface{}, opts ...*options.FindOneAndDeleteOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndDelete")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneAndDeleteOptions) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// MockIMongoCollection_FindOneAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndDelete'
type MockIMongoCollection_FindOneAndDelete_Call struct {
	*mock.Call
}

// FindOneAndDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - opts ...*options.FindOneAndDeleteOptions
func (_e *MockIMongoCollection_Expecter) FindOneAndDelete(ctx interface{}, filter interface{}, opts ...interface{}) *MockIMongoCollection_FindOneAndDelete_Call {
	return &MockIMongoCollection_FindOneAndDelete_Call{Call: _e.mock.On("FindOneAndDelete",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockIMongoCollection_FindOneAndDelete_Call) Run(run func(ctx context.Context, filter interface{}, opts ...*options.FindOneAndDeleteOptions)) *MockIMongoCollection_FindOneAndDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneAndDeleteOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneAndDeleteOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_FindOneAndDelete_Call) Return(_a0 *mongo.SingleResult) *MockIMongoCollection_FindOneAndDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_FindOneAndDelete_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOneAndDeleteOptions) *mongo.SingleResult) *MockIMongoCollection_FindOneAndDelete_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndReplace provides a mock function with given fields: ctx, filter, replacement, opts
func (_m *MockIMongoCollection) FindOneAndReplace(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.FindOneAndReplaceOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndReplace")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.FindOneAndReplaceOptions) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// MockIMongoCollection_FindOneAndReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndReplace'
type MockIMongoCollection_FindOneAndReplace_Call struct {
	*mock.Call
}

// FindOneAndReplace is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - replacement interface{}
//   - opts ...*options.FindOneAndReplaceOptions
func (_e *MockIMongoCollection_Expecter) FindOneAndReplace(ctx interface{}, filter interface{}, replacement interface{}, opts ...interface{}) *MockIMongoCollection_FindOneAndReplace_Call {
	return &MockIMongoCollection_FindOneAndReplace_Call{Call: _e.mock.On("FindOneAndReplace",
		append([]interface{}{ctx, filter, replacement}, opts...)...)}
}

func (_c *MockIMongoCollection_FindOneAndReplace_Call) Run(run func(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.FindOneAndReplaceOptions)) *MockIMongoCollection_FindOneAndReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneAndReplaceOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneAndReplaceOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_FindOneAndReplace_Call) Return(_a0 *mongo.SingleResult) *MockIMongoCollection_FindOneAndReplace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_FindOneAndReplace_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.FindOneAndReplaceOptions) *mongo.SingleResult) *MockIMongoCollection_FindOneAndReplace_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndUpdate provides a mock function with given fields: ctx, filter, update, opts
func (_m *MockIMongoCollection) FindOneAndUpdate(ctx context.Context, filter interface{}, update interface{}, opts ...*options.FindOneAndUpdateOptions) *mongo.SingleResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdate")
	}

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.FindOneAndUpdateOptions) *mongo.SingleResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// MockIMongoCollection_FindOneAndUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndUpdate'
type MockIMongoCollection_FindOneAndUpdate_Call struct {
	*mock.Call
}

// FindOneAndUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.FindOneAndUpdateOptions
func (_e *MockIMongoCollection_Expecter) FindOneAndUpdate(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockIMongoCollection_FindOneAndUpdate_Call {
	return &MockIMongoCollection_FindOneAndUpdate_Call{Call: _e.mock.On("FindOneAndUpdate",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockIMongoCollection_FindOneAndUpdate_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.FindOneAndUpdateOptions)) *MockIMongoCollection_FindOneAndUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOneAndUpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOneAndUpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_FindOneAndUpdate_Call) Return(_a0 *mongo.SingleResult) *MockIMongoCollection_FindOneAndUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_FindOneAndUpdate_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.FindOneAndUpdateOptions) *mongo.SingleResult) *MockIMongoCollection_FindOneAndUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Indexes provides a mock function with given fields:
func (_m *MockIMongoCollection) Indexes() mongo.IndexView {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Indexes")
	}

	var r0 mongo.IndexView
	if rf, ok := ret.Get(0).(func() mongo.IndexView); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mongo.IndexView)
	}

	return r0
}

// MockIMongoCollection_Indexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indexes'
type MockIMongoCollection_Indexes_Call struct {
	*mock.Call
}

// Indexes is a helper method to define mock.On call
func (_e *MockIMongoCollection_Expecter) Indexes() *MockIMongoCollection_Indexes_Call {
	return &MockIMongoCollection_Indexes_Call{Call: _e.mock.On("Indexes")}
}

func (_c *MockIMongoCollection_Indexes_Call) Run(run func()) *MockIMongoCollection_Indexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoCollection_Indexes_Call) Return(_a0 mongo.IndexView) *MockIMongoCollection_Indexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_Indexes_Call) RunAndReturn(run func() mongo.IndexView) *MockIMongoCollection_Indexes_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function with given fields: ctx, documents, opts
func (_m *MockIMongoCollection) InsertMany(ctx context.Context, documents []interface{}, opts ...*options.InsertManyOptions) (*mongo.InsertManyResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, documents)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 *mongo.InsertManyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}, ...*options.InsertManyOptions) (*mongo.InsertManyResult, error)); ok {
		return rf(ctx, documents, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}, ...*options.InsertManyOptions) *mongo.InsertManyResult); ok {
		r0 = rf(ctx, documents, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertManyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []interface{}, ...*options.InsertManyOptions) error); ok {
		r1 = rf(ctx, documents, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockIMongoCollection_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - documents []interface{}
//   - opts ...*options.InsertManyOptions
func (_e *MockIMongoCollection_Expecter) InsertMany(ctx interface{}, documents interface{}, opts ...interface{}) *MockIMongoCollection_InsertMany_Call {
	return &MockIMongoCollection_InsertMany_Call{Call: _e.mock.On("InsertMany",
		append([]interface{}{ctx, documents}, opts...)...)}
}

func (_c *MockIMongoCollection_InsertMany_Call) Run(run func(ctx context.Context, documents []interface{}, opts ...*options.InsertManyOptions)) *MockIMongoCollection_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.InsertManyOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.InsertManyOptions)
			}
		}
		run(args[0].(context.Context), args[1].([]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_InsertMany_Call) Return(_a0 *mongo.InsertManyResult, _a1 error) *MockIMongoCollection_InsertMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_InsertMany_Call) RunAndReturn(run func(context.Context, []interface{}, ...*options.InsertManyOptions) (*mongo.InsertManyResult, error)) *MockIMongoCollection_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, document, opts
func (_m *MockIMongoCollection) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) (*mongo.InsertOneResult, error)); ok {
		return rf(ctx, document, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockIMongoCollection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document interface{}
//   - opts ...*options.InsertOneOptions
func (_e *MockIMongoCollection_Expecter) InsertOne(ctx interface{}, document interface{}, opts ...interface{}) *MockIMongoCollection_InsertOne_Call {
	return &MockIMongoCollection_InsertOne_Call{Call: _e.mock.On("InsertOne",
		append([]interface{}{ctx, document}, opts...)...)}
}

func (_c *MockIMongoCollection_InsertOne_Call) Run(run func(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions)) *MockIMongoCollection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.InsertOneOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.InsertOneOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_InsertOne_Call) Return(_a0 *mongo.InsertOneResult, _a1 error) *MockIMongoCollection_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_InsertOne_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.InsertOneOptions) (*mongo.InsertOneResult, error)) *MockIMongoCollection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockIMongoCollection) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIMongoCollection_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockIMongoCollection_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockIMongoCollection_Expecter) Name() *MockIMongoCollection_Name_Call {
	return &MockIMongoCollection_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockIMongoCollection_Name_Call) Run(run func()) *MockIMongoCollection_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoCollection_Name_Call) Return(_a0 string) *MockIMongoCollection_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_Name_Call) RunAndReturn(run func() string) *MockIMongoCollection_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceOne provides a mock function with given fields: ctx, filter, replacement, opts
func (_m *MockIMongoCollection) ReplaceOne(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.ReplaceOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, replacement, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) error); ok {
		r1 = rf(ctx, filter, replacement, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_ReplaceOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceOne'
type MockIMongoCollection_ReplaceOne_Call struct {
	*mock.Call
}

// ReplaceOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - replacement interface{}
//   - opts ...*options.ReplaceOptions
func (_e *MockIMongoCollection_Expecter) ReplaceOne(ctx interface{}, filter interface{}, replacement interface{}, opts ...interface{}) *MockIMongoCollection_ReplaceOne_Call {
	return &MockIMongoCollection_ReplaceOne_Call{Call: _e.mock.On("ReplaceOne",
		append([]interface{}{ctx, filter, replacement}, opts...)...)}
}

func (_c *MockIMongoCollection_ReplaceOne_Call) Run(run func(ctx context.Context, filter interface{}, replacement interface{}, opts ...*options.ReplaceOptions)) *MockIMongoCollection_ReplaceOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ReplaceOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ReplaceOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_ReplaceOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockIMongoCollection_ReplaceOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_ReplaceOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) (*mongo.UpdateResult, error)) *MockIMongoCollection_ReplaceOne_Call {
	_c.Call.Return(run)
	return _c
}

// SearchIndexes provides a mock function with given fields:
func (_m *MockIMongoCollection) SearchIndexes() mongo.SearchIndexView {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SearchIndexes")
	}

	var r0 mongo.SearchIndexView
	if rf, ok := ret.Get(0).(func() mongo.SearchIndexView); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mongo.SearchIndexView)
	}

	return r0
}

// MockIMongoCollection_SearchIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchIndexes'
type MockIMongoCollection_SearchIndexes_Call struct {
	*mock.Call
}

// SearchIndexes is a helper method to define mock.On call
func (_e *MockIMongoCollection_Expecter) SearchIndexes() *MockIMongoCollection_SearchIndexes_Call {
	return &MockIMongoCollection_SearchIndexes_Call{Call: _e.mock.On("SearchIndexes")}
}

func (_c *MockIMongoCollection_SearchIndexes_Call) Run(run func()) *MockIMongoCollection_SearchIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoCollection_SearchIndexes_Call) Return(_a0 mongo.SearchIndexView) *MockIMongoCollection_SearchIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoCollection_SearchIndexes_Call) RunAndReturn(run func() mongo.SearchIndexView) *MockIMongoCollection_SearchIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, id, update, opts
func (_m *MockIMongoCollection) UpdateByID(ctx context.Context, id interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, id, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, id, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, id, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockIMongoCollection_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *MockIMongoCollection_Expecter) UpdateByID(ctx interface{}, id interface{}, update interface{}, opts ...interface{}) *MockIMongoCollection_UpdateByID_Call {
	return &MockIMongoCollection_UpdateByID_Call{Call: _e.mock.On("UpdateByID",
		append([]interface{}{ctx, id, update}, opts...)...)}
}

func (_c *MockIMongoCollection_UpdateByID_Call) Run(run func(ctx context.Context, id interface{}, update interface{}, opts ...*options.UpdateOptions)) *MockIMongoCollection_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_UpdateByID_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockIMongoCollection_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_UpdateByID_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *MockIMongoCollection_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function with given fields: ctx, filter, update, opts
func (_m *MockIMongoCollection) UpdateMany(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type MockIMongoCollection_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *MockIMongoCollection_Expecter) UpdateMany(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockIMongoCollection_UpdateMany_Call {
	return &MockIMongoCollection_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockIMongoCollection_UpdateMany_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *MockIMongoCollection_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_UpdateMany_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockIMongoCollection_UpdateMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_UpdateMany_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *MockIMongoCollection_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, filter, update, opts
func (_m *MockIMongoCollection) UpdateOne(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(ctx, filter, update, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockIMongoCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter interface{}
//   - update interface{}
//   - opts ...*options.UpdateOptions
func (_e *MockIMongoCollection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockIMongoCollection_UpdateOne_Call {
	return &MockIMongoCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockIMongoCollection_UpdateOne_Call) Run(run func(ctx context.Context, filter interface{}, update interface{}, opts ...*options.UpdateOptions)) *MockIMongoCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_UpdateOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockIMongoCollection_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_UpdateOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *MockIMongoCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, pipeline, opts
func (_m *MockIMongoCollection) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) *mongo.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongoCollection_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockIMongoCollection_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *MockIMongoCollection_Expecter) Watch(ctx interface{}, pipeline interface{}, opts ...interface{}) *MockIMongoCollection_Watch_Call {
	return &MockIMongoCollection_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *MockIMongoCollection_Watch_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *MockIMongoCollection_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockIMongoCollection_Watch_Call) Return(_a0 *mongo.ChangeStream, _a1 error) *MockIMongoCollection_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoCollection_Watch_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)) *MockIMongoCollection_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMongoCollection creates a new instance of MockIMongoCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMongoCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMongoCollection {
	mock := &MockIMongoCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
