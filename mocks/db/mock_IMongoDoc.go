// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	errs "github.com/amirdaaee/TGMon/internal/errs"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockIMongoDoc is an autogenerated mock type for the IMongoDoc type
type MockIMongoDoc struct {
	mock.Mock
}

type MockIMongoDoc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMongoDoc) EXPECT() *MockIMongoDoc_Expecter {
	return &MockIMongoDoc_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function with given fields:
func (_m *MockIMongoDoc) GetID() primitive.ObjectID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 primitive.ObjectID
	if rf, ok := ret.Get(0).(func() primitive.ObjectID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(primitive.ObjectID)
		}
	}

	return r0
}

// MockIMongoDoc_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockIMongoDoc_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockIMongoDoc_Expecter) GetID() *MockIMongoDoc_GetID_Call {
	return &MockIMongoDoc_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockIMongoDoc_GetID_Call) Run(run func()) *MockIMongoDoc_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoDoc_GetID_Call) Return(_a0 primitive.ObjectID) *MockIMongoDoc_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDoc_GetID_Call) RunAndReturn(run func() primitive.ObjectID) *MockIMongoDoc_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDStr provides a mock function with given fields:
func (_m *MockIMongoDoc) GetIDStr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIDStr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIMongoDoc_GetIDStr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDStr'
type MockIMongoDoc_GetIDStr_Call struct {
	*mock.Call
}

// GetIDStr is a helper method to define mock.On call
func (_e *MockIMongoDoc_Expecter) GetIDStr() *MockIMongoDoc_GetIDStr_Call {
	return &MockIMongoDoc_GetIDStr_Call{Call: _e.mock.On("GetIDStr")}
}

func (_c *MockIMongoDoc_GetIDStr_Call) Run(run func()) *MockIMongoDoc_GetIDStr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoDoc_GetIDStr_Call) Return(_a0 string) *MockIMongoDoc_GetIDStr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDoc_GetIDStr_Call) RunAndReturn(run func() string) *MockIMongoDoc_GetIDStr_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalOmitEmpty provides a mock function with given fields:
func (_m *MockIMongoDoc) MarshalOmitEmpty() (*primitive.M, errs.IMongoErr) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalOmitEmpty")
	}

	var r0 *primitive.M
	var r1 errs.IMongoErr
	if rf, ok := ret.Get(0).(func() (*primitive.M, errs.IMongoErr)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *primitive.M); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.M)
		}
	}

	if rf, ok := ret.Get(1).(func() errs.IMongoErr); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errs.IMongoErr)
		}
	}

	return r0, r1
}

// MockIMongoDoc_MarshalOmitEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalOmitEmpty'
type MockIMongoDoc_MarshalOmitEmpty_Call struct {
	*mock.Call
}

// MarshalOmitEmpty is a helper method to define mock.On call
func (_e *MockIMongoDoc_Expecter) MarshalOmitEmpty() *MockIMongoDoc_MarshalOmitEmpty_Call {
	return &MockIMongoDoc_MarshalOmitEmpty_Call{Call: _e.mock.On("MarshalOmitEmpty")}
}

func (_c *MockIMongoDoc_MarshalOmitEmpty_Call) Run(run func()) *MockIMongoDoc_MarshalOmitEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongoDoc_MarshalOmitEmpty_Call) Return(_a0 *primitive.M, _a1 errs.IMongoErr) *MockIMongoDoc_MarshalOmitEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongoDoc_MarshalOmitEmpty_Call) RunAndReturn(run func() (*primitive.M, errs.IMongoErr)) *MockIMongoDoc_MarshalOmitEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// SetID provides a mock function with given fields: _a0
func (_m *MockIMongoDoc) SetID(_a0 primitive.ObjectID) {
	_m.Called(_a0)
}

// MockIMongoDoc_SetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetID'
type MockIMongoDoc_SetID_Call struct {
	*mock.Call
}

// SetID is a helper method to define mock.On call
//   - _a0 primitive.ObjectID
func (_e *MockIMongoDoc_Expecter) SetID(_a0 interface{}) *MockIMongoDoc_SetID_Call {
	return &MockIMongoDoc_SetID_Call{Call: _e.mock.On("SetID", _a0)}
}

func (_c *MockIMongoDoc_SetID_Call) Run(run func(_a0 primitive.ObjectID)) *MockIMongoDoc_SetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(primitive.ObjectID))
	})
	return _c
}

func (_c *MockIMongoDoc_SetID_Call) Return() *MockIMongoDoc_SetID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIMongoDoc_SetID_Call) RunAndReturn(run func(primitive.ObjectID)) *MockIMongoDoc_SetID_Call {
	_c.Call.Return(run)
	return _c
}

// SetIDStr provides a mock function with given fields: _a0
func (_m *MockIMongoDoc) SetIDStr(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetIDStr")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIMongoDoc_SetIDStr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIDStr'
type MockIMongoDoc_SetIDStr_Call struct {
	*mock.Call
}

// SetIDStr is a helper method to define mock.On call
//   - _a0 string
func (_e *MockIMongoDoc_Expecter) SetIDStr(_a0 interface{}) *MockIMongoDoc_SetIDStr_Call {
	return &MockIMongoDoc_SetIDStr_Call{Call: _e.mock.On("SetIDStr", _a0)}
}

func (_c *MockIMongoDoc_SetIDStr_Call) Run(run func(_a0 string)) *MockIMongoDoc_SetIDStr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIMongoDoc_SetIDStr_Call) Return(_a0 error) *MockIMongoDoc_SetIDStr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongoDoc_SetIDStr_Call) RunAndReturn(run func(string) error) *MockIMongoDoc_SetIDStr_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMongoDoc creates a new instance of MockIMongoDoc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMongoDoc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMongoDoc {
	mock := &MockIMongoDoc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
