// Code generated by MockGen. DO NOT EDIT.
// Source: minio.go
//
// Generated by this command:
//
//	mockgen -source=minio.go -destination=../../../mocks/db/minio/minio.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	minio "github.com/minio/minio-go/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockIMinioCl is a mock of IMinioCl interface.
type MockIMinioCl struct {
	ctrl     *gomock.Controller
	recorder *MockIMinioClMockRecorder
	isgomock struct{}
}

// MockIMinioClMockRecorder is the mock recorder for MockIMinioCl.
type MockIMinioClMockRecorder struct {
	mock *MockIMinioCl
}

// NewMockIMinioCl creates a new mock instance.
func NewMockIMinioCl(ctrl *gomock.Controller) *MockIMinioCl {
	mock := &MockIMinioCl{ctrl: ctrl}
	mock.recorder = &MockIMinioClMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMinioCl) EXPECT() *MockIMinioClMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockIMinioCl) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockIMinioClMockRecorder) BucketExists(ctx, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockIMinioCl)(nil).BucketExists), ctx, bucketName)
}

// MakeBucket mocks base method.
func (m *MockIMinioCl) MakeBucket(ctx context.Context, bucketName string, opts minio.MakeBucketOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockIMinioClMockRecorder) MakeBucket(ctx, bucketName, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockIMinioCl)(nil).MakeBucket), ctx, bucketName, opts)
}

// PutObject mocks base method.
func (m *MockIMinioCl) PutObject(ctx context.Context, bucketName, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucketName, objectName, reader, objectSize, opts)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockIMinioClMockRecorder) PutObject(ctx, bucketName, objectName, reader, objectSize, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockIMinioCl)(nil).PutObject), ctx, bucketName, objectName, reader, objectSize, opts)
}

// RemoveObject mocks base method.
func (m *MockIMinioCl) RemoveObject(ctx context.Context, bucketName, objectName string, opts minio.RemoveObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObject indicates an expected call of RemoveObject.
func (mr *MockIMinioClMockRecorder) RemoveObject(ctx, bucketName, objectName, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObject", reflect.TypeOf((*MockIMinioCl)(nil).RemoveObject), ctx, bucketName, objectName, opts)
}

// MockIMinioClient is a mock of IMinioClient interface.
type MockIMinioClient struct {
	ctrl     *gomock.Controller
	recorder *MockIMinioClientMockRecorder
	isgomock struct{}
}

// MockIMinioClientMockRecorder is the mock recorder for MockIMinioClient.
type MockIMinioClientMockRecorder struct {
	mock *MockIMinioClient
}

// NewMockIMinioClient creates a new mock instance.
func NewMockIMinioClient(ctrl *gomock.Controller) *MockIMinioClient {
	mock := &MockIMinioClient{ctrl: ctrl}
	mock.recorder = &MockIMinioClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMinioClient) EXPECT() *MockIMinioClientMockRecorder {
	return m.recorder
}

// CreateBucket mocks base method.
func (m *MockIMinioClient) CreateBucket(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockIMinioClientMockRecorder) CreateBucket(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockIMinioClient)(nil).CreateBucket), ctx)
}

// FileAdd mocks base method.
func (m *MockIMinioClient) FileAdd(ctx context.Context, fileName string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileAdd", ctx, fileName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileAdd indicates an expected call of FileAdd.
func (mr *MockIMinioClientMockRecorder) FileAdd(ctx, fileName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAdd", reflect.TypeOf((*MockIMinioClient)(nil).FileAdd), ctx, fileName, data)
}

// FileAddStr mocks base method.
func (m *MockIMinioClient) FileAddStr(ctx context.Context, fileName, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileAddStr", ctx, fileName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileAddStr indicates an expected call of FileAddStr.
func (mr *MockIMinioClientMockRecorder) FileAddStr(ctx, fileName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAddStr", reflect.TypeOf((*MockIMinioClient)(nil).FileAddStr), ctx, fileName, data)
}

// FileRm mocks base method.
func (m *MockIMinioClient) FileRm(ctx context.Context, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileRm", ctx, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileRm indicates an expected call of FileRm.
func (mr *MockIMinioClientMockRecorder) FileRm(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileRm", reflect.TypeOf((*MockIMinioClient)(nil).FileRm), ctx, fileName)
}
