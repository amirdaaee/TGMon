// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	db "github.com/amirdaaee/TGMon/internal/db"
	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockIMongo is an autogenerated mock type for the IMongo type
type MockIMongo struct {
	mock.Mock
}

type MockIMongo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMongo) EXPECT() *MockIMongo_Expecter {
	return &MockIMongo_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function with given fields:
func (_m *MockIMongo) GetClient() (db.IMongoClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 db.IMongoClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (db.IMongoClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() db.IMongoClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.IMongoClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIMongo_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockIMongo_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockIMongo_Expecter) GetClient() *MockIMongo_GetClient_Call {
	return &MockIMongo_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *MockIMongo_GetClient_Call) Run(run func()) *MockIMongo_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongo_GetClient_Call) Return(_a0 db.IMongoClient, _a1 error) *MockIMongo_GetClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIMongo_GetClient_Call) RunAndReturn(run func() (db.IMongoClient, error)) *MockIMongo_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollection provides a mock function with given fields: cl
func (_m *MockIMongo) GetCollection(cl db.IMongoClient) *mongo.Collection {
	ret := _m.Called(cl)

	if len(ret) == 0 {
		panic("no return value specified for GetCollection")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(db.IMongoClient) *mongo.Collection); ok {
		r0 = rf(cl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// MockIMongo_GetCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollection'
type MockIMongo_GetCollection_Call struct {
	*mock.Call
}

// GetCollection is a helper method to define mock.On call
//   - cl db.IMongoClient
func (_e *MockIMongo_Expecter) GetCollection(cl interface{}) *MockIMongo_GetCollection_Call {
	return &MockIMongo_GetCollection_Call{Call: _e.mock.On("GetCollection", cl)}
}

func (_c *MockIMongo_GetCollection_Call) Run(run func(cl db.IMongoClient)) *MockIMongo_GetCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.IMongoClient))
	})
	return _c
}

func (_c *MockIMongo_GetCollection_Call) Return(_a0 *mongo.Collection) *MockIMongo_GetCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIMongo_GetCollection_Call) RunAndReturn(run func(db.IMongoClient) *mongo.Collection) *MockIMongo_GetCollection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMongo creates a new instance of MockIMongo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMongo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMongo {
	mock := &MockIMongo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
